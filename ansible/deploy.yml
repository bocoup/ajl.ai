# Clone the repo and check out the specified "commit" (defaults to master)
# unless it has already been deployed. When done, symlink the specified
# commit and remove old versions to free up disk space.

- hosts: all
  become: yes
  become_user: "{{user}}"
  vars_files:
    - vars/main.yml
    # - vars/secrets.yml (included below, but only for staging/production)
  tasks:
    # Start decrypting secrets (if we need them).
    - include_vars:
        file: vars/secrets.yml
      when: "{{env != 'development'}}"
    # End decrypting secrets.

    # Start cloning desired commit.
    - name: ensure temp directory is absent
      file:
        path: "{{clone_path}}"
        state: absent

    - name: clone git repo into temp directory
      git:
        repo: "{{git_repo}}"
        dest: "{{clone_path}}"
        version: "{{commit}}"

    - name: get sha of cloned repo
      command: git rev-parse HEAD
      args:
        chdir: "{{clone_path}}"
      register: sha
      changed_when: false

    - name: check if specified commit sha has already been deployed
      stat:
        path: "{{base_path}}/{{sha.stdout}}"
        get_checksum: no
        get_md5: no
      register: sha_dir

    # if a commit is specified that has already been checked out,
    # make sure it is symlinked before aborting the deploy process.
    - name: rolling back to previously deployed commit {{commit}}
      file:
        path: "{{site_path}}"
        state: link
        src: "{{base_path}}/{{sha.stdout | default(commit)}}"
        force: yes
      when: "{{sha_dir.stat.exists}}"

    - name: refuse to continue if commit is already deployed
      fail:
        msg: "{{sha.stdout}} has been deployed already, aborting."
      when: "{{sha_dir.stat.exists}}"
    # End cloning desired commit.

    # Start build tasks.
    - name: ensure environment is configured
      template:
        src: .env.j2
        dest: "{{clone_path}}/.env"

    - name: ensure package dependencies are installed
      command: yarn
      args:
        chdir: "{{clone_path}}"

    - name: ensure site is built
      shell: yarn run build:{{env}}
      args:
        chdir: "{{clone_path}}"

    - name: ensure database has been migrated
      shell: yarn run migrate:up
      args:
        chdir: "{{clone_path}}"
    # End build tasks.

    # Start moving into production.
    - name: move cloned repo to sha-named directory
      command: mv {{clone_path}} {{base_path}}/{{sha.stdout}}

    - name: link sha-named clone to make it live
      file:
        path: "{{site_path}}"
        state: link
        src: "{{base_path}}/{{sha.stdout | default(commit)}}"
        force: yes

    # see https://gist.github.com/nanobeep/3b3d614a709086ff832a
    # to understand why raw is needed here
    - name: ensure api service is restarted
      raw: sudo systemctl restart api
      become: no
    # End moving into production.

    # Start cleanup.
    - name: update last-modification time of sha-named clone
      file:
        path: "{{base_path}}/{{sha.stdout | default(commit)}}"
        state: touch

    - name: remove old clones to free up disk space
      shell: |
        # Find all 40-char-SHA-named child directories and for each directory, print
        # out the last-modified timestamp and the SHA.
        find . -mindepth 1 -maxdepth 1 -type d \
        -regextype posix-extended -regex './[0-9a-f]{40}' -printf '%T@ %P\n' |
        # Sort numerically in ascending order (on the timestamp), remove the
        # timestamp from each line (leaving only the SHA), then remove the most
        # recent SHAs from the list (leaving only the old SHAs-to-be-removed).
        sort -n | cut -d ' ' -f 2 | head -n -{{keep_n_most_recent}} |
        # Remove each remaining SHA-named directory and echo the SHA (so the task
        # can display whether or not changes were made).
        xargs -I % sh -c 'rm -rf "$1"; echo "$1"' -- %
      register: remove_result
      changed_when: "{{remove_result.stdout != ''}}"
      args:
        chdir: "{{base_path}}"

    - name: ensure temp directory is absent
      file:
        path: "{{clone_path}}"
        state: absent
    # End cleanup.
